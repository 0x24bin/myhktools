#!/usr/bin/env node
/**
openssl req -newkey rsa:2048 -new -nodes -keyout key.pem -out csr.pem
openssl x509 -req -days 365 -in csr.pem -signkey key.pem -out server.crt
1、浏览器访问测试
https://127.0.0.1:8088/
2、命令访问测试
curl -v -k -H "User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36" https://127.0.0.1:8088/
*/
var app = require(__dirname + '/app'),
    debug = require('debug')('myapp:server'),
    http = require('http'),
    fs = require('fs'),
    https = require('https'),
    options = {
      key: fs.readFileSync(__dirname + '/ca/key.pem', 'utf8'),
      // 必须用server.crt,否则报错
      cert: fs.readFileSync(__dirname + '/ca/server.crt', 'utf8')
};

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '8088');
app.set('port', port);
/**
 * Create HTTP server. 30秒
 server = http.createServer(app),// 普通http
 */
var server = https.createServer(options, app),nPI = 30000,
    io = require('socket.io')(server,{pingInterval: nPI,
    pingTimeout: nPI * 1.3});
// io.emit('xx',fn);// 发送消息给所有client
global.g_socketIO = io;
// 当有socket连接到达
io.on('connection', function (socket)
{
  // socket.emit('news', { hello: 'world' });
  // 监听事件，获得请求的行为
  socket.on('rDo', function(data)
  {
    if(data)
    {
      // 定位模块，执行接口方法，因为客户端发过来的请求会有很多类型，各种请求
    }
    console.log(data);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * 端口的处理
 */
function normalizePort(val)
{
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}

/**
 * 异常处理Event listener for HTTP server "error" event.
 */
function onError(error) 
{
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() 
{
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}